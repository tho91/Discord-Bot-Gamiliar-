const { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder, StringSelectMenuBuilder } = require("discord.js");
const { compareAll } = require("../data/jsonFunctions");
const games = require("../data/games.json");
const context = require("../imports/contextData");

module.exports = {
  data: new SlashCommandBuilder()
    .setName('compareall')
    .setDescription('Compare common games among server members'),

  async execute(interaction) {

    //all members even if offline; 
    var memberIds = await (await interaction.guild.members.fetch()).map(member => member.id);
    const commonGames = compareAll(memberIds);
    //console.log(commonGames);

    // sort the games by count of users who play it by using array of arrays
    const sortedGames = Object.entries(commonGames).sort((a, b) => {
      return b[1].length - a[1].length;
    });

    // create the embed message
    const embed = {
      color: 0x0099ff,
      title: 'Common Games Among Server Members',
      description: 'Top games and number of members who play them',
      fields: [],
      timestamp: new Date(),
      footer: {
        text: 'Generated by CompareAll command'
      }
    };
    //console.log(sortedGames);
    // loop through the sorted games and add them as fields in the embed message
    sortedGames.forEach((game) => {
      embed.fields.push({
        name: games[String(game[0])],
        value: `${game[1].length} members`,
        inline: true
      });
    });
    if (embed.fields.length < 1)
      embed.fields = undefined;
    else while (embed.fields.length > 25)
      embed.fields.pop();

    // create the dropdown menu options
    const dropdownOptions = sortedGames.map((game) => {
      return {
        label: games[String(game[0])],
        value: game[0],
        description: `${game[1].length} members play this game`,
      };
    });

    // create the dropdown menu
    const dropdownMenu = new StringSelectMenuBuilder(
      {
        custom_id: `${this.data.name}_dropdown`,
        placeholder: "Select a game to see players",
        options: dropdownOptions,
      }
    );

    //create back button
    const backButton = new ButtonBuilder(
      {
        style: 4,
        label: "Back",
        custom_id: this.data.name,
        disabled: true
      }
    );

    
    let msg = {
      embeds: [embed],
      components: dropdownOptions.length ? [
        new ActionRowBuilder().addComponents(dropdownMenu),
        new ActionRowBuilder().addComponents(backButton)
      ] : undefined
    };

    //save in app scope
    context.setAttribute("ca_" + String(interaction.guild.id), { sortedGames: sortedGames, mainMsg: msg, cmdUserId: interaction.user.id });

    await interaction.reply(msg);
  },
  //===== *END* execute *END* =====================================


  //===== Dropdown Event ==========================================
  async selectMenu(interact) {
    const gameId = interact.values[0];
    let sortedGames = context.getAttribute("ca_" + String(interact.guild.id));

    //check if expired metadata in context
    if (sortedGames == null) {
      sendExpired(interact);
      return;
    }

    let cmdUserId = context.getAttribute("ca_" + String(interact.guild.id)).cmdUserId;
    if (cmdUserId != interact.user.id) return;

    sortedGames = sortedGames.sortedGames;
    //retreive the specfic user list for selected game
    for (const game of sortedGames) {
      if (game[0] == gameId) {
        var userList = game[1];
        break;
      }
    }

    let curEmbed = interact.message.embeds[0].data;
    curEmbed = curEmbed ? curEmbed : { color: 0x0099ff };

    //edit embed
    curEmbed.title = "People who play " + games[gameId];
    curEmbed.description = "";
    curEmbed.fields = undefined;
    for (const userId of userList) {
      curEmbed.description += (curEmbed.description.length == 0 ? "" : "\n")
        + `<@!${userId}>`;
    }

    //enable back button
    const rows = interact.message.components;
    rows[1].components[0].data.disabled = false;

    await interact.update({
      embeds: [curEmbed],
      components: rows
    });
  },
  //===== *END* Dropdown Event *END* =================================


  //===== Back Button ================================================
  async button(interact) {
    metadata = context.getAttribute("ca_" + interact.guild.id);

    if (metadata == null)
      return sendExpired(interact);

    if (metadata.cmdUserId != interact.user.id) return;

    await interact.update(metadata.mainMsg);
  }
  //===== *END* Back Button *END* ================================================

};




function sendExpired(interact) {
  interact.message.edit({
    embeds: [{
      title: "Expired CompareAll",
      description: "Please do `/compareall` again."
    }],
    components: []
  });
}
